% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_models.R
\name{train_models}
\alias{train_models}
\title{Train models: CSR, LASSO, Bagging, Ensemble, RW and Benchmark}
\usage{
train_models(
  data,
  y,
  init_window = 150,
  horizon = 12,
  K = 20,
  k = 15,
  R = 500,
  pre_testing = "group-joint",
  quiet = FALSE,
  benchmark_col_regex = "expectativa_ipca_h_\\\\d{1,2}$",
  benchmark_name = "Focus",
  ...
)
}
\arguments{
\item{data}{A tsibble object}

\item{y}{Column name of the variable of interest}

\item{init_window}{Number of initial observations to be used in the first cross-validation subsample}

\item{horizon}{Forecast horizon}

\item{K}{Number of variables to be selected after the pre-testing. If K=ncol(x) the pre-testing is redundant (see \code{HDeconometrics::csr}).}

\item{k}{Number of variables in each subset. Must be smaller than K (see \code{HDeconometrics::csr}).}

\item{R}{Number of bootstrap replucations (see \code{HDeconometrics::bagging}).}

\item{pre_testing}{The type of pre-testing (see \code{HDeconometrics::bagging}).}

\item{quiet}{The default (\code{FALSE}) prints log messages to the Console.}

\item{benchmark_col_regex}{Regex expression for internal selection of columns to take predictions from a "benchmark model". The number of columns must be at least 1 and at most equal to \code{horizon}, corresponding to the forecast horizons.}

\item{benchmark_name}{Name to be given to the benchmark model.}

\item{...}{Arguments passed to the HDeconometrics package}
}
\value{
Tibble
}
\description{
This function implements the cross-validation method with the models mentioned above. The Ensemble model is a simple average of the CSR and Bagging model predictions. The Benchmark model comes from columns in \code{data}, used to calculate the accuracy (RMSE) in relation to the observed \code{y}. Usually, these columns are external predictions (Focus) used in the model and as a benchmark.
}
\examples{
df_macro <- get_data(quiet = TRUE)
df_macro_augmented <- ts_transform(df_macro, "ipca")
seasonal_dummies <- names(df_macro_augmented[, names(df_macro_augmented) \%in\% month.abb])
acc <- train_models(df_macro_augmented, "ipca", fixed.controls = seasonal_dummies)
}
